with Ada.Calendar;
with Ada.Text_IO;
use Ada.Calendar;
use Ada.Text_IO;
with Ada.Numerics.Discrete_Random;

procedure example is
    Message: constant String := "Cyclic scheduler";
    d: Duration := 1.0;
    F1_Next : Time := Clock;
    F3_Period : Time := Clock + d;
    F3_Next : Time := F3_Period + 0.5 ;
    Start_Time: Time := Clock;
   package Random_Execution_Time is new Ada.Numerics.Discrete_Random(Boolean);
   use Random_Execution_Time;
   G : Generator;
   Reset_F1: Duration := 0.0 ;
  


        -- change/add your declarations here
    
	procedure f1 is 
		Message: constant String := "f1 executing, time is now";
	begin
		Put(Message);
		Put_Line(Duration'Image(Clock - Start_Time));
	end f1;
       procedure f2 is 
		Message: constant String := "f2 executing, time is now";
	begin
		Put(Message);
		Put_Line(Duration'Image(Clock - Start_Time));
	end f2;
       procedure f3 is 
		Message: constant String := "f3 executing";
	begin
		Put_Line(Message);		
                Reset(G);
		if Random(G) then

 			 delay until Clock + 0.6;
                Reset_F1 := Duration(Float'Ceiling(Float(Clock - Start_Time)));
                F1_Next := Start_Time + Reset_F1;
		end if;
                Put("time is now");
                Put_Line(Duration'Image(Clock - Start_Time));
            end f3;    
               
   		Task Watchdog is
		 entry Start;
		 entry Stop;
                 
 	        end Watchdog;
		task body Watchdog is
                 WD_Status : Boolean := False;
                begin
                 loop
                  select
                   accept Start do 
                    Put_Line("Rawr! Screening!");
                    WD_Status := True;
                   end Start;
		  or
		   accept Stop do
                    Put_Line("..zzZZZzz");
                    WD_Status := False;
   	           end Stop;
 	          or
                    delay 0.5;
		    if WD_Status = True then
                    
                     Put_Line(" F3 wandered away! ");
                    end if;
                   end select;
                 end loop;
                  end Watchdog;
                   
  
	
begin
        loop
            -- change/add your code inside this loop
                delay until F1_Next;   
                f1;f2;
                F1_Next := Clock + d;
                if F3_Next < F1_Next then
                delay until F3_Next;
                Watchdog.Start;
                f3;
                Watchdog.Stop;
                F3_Next := F1_Next + 1.5;
         end if;        
        end loop;
end example;
